using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace cnosole_for_nothing {
    class Solved {

        #region __BreadthFirstSearch_Working
        private static void BFS() {
            var g = Console.ReadLine().Split(' ');
            var N = int.Parse(g[0]);
            var M = int.Parse(g[1]);

            var dir1 = new int[M];
            var dir2 = new int[M];
            for (int p = 0; p < M; p++) {
                var t = Console.ReadLine().Split(' ');
                dir1[p] = int.Parse(t[0]);
                dir2[p] = int.Parse(t[1]);
            }

            var rt = int.Parse(Console.ReadLine());
            var distance = new int[N];
            //var parent = new int[N];
            for (var _e = 0; _e < N; _e++) { distance[_e] = -1; }// parent[_e] = -1; }

            var Q = new List<int>();
            distance[rt - 1] = 0;
            Q.Add(rt - 1);

            var current = -1;
            var dss = 1;
            while (Q.Count > 0) {
                if (dss >= N) break;
                current = Q[0] + 1; // zero indexing
                Q.RemoveAt(0);

                for (var _c = 0; _c < M; _c++) {
                    int _m = 0;
                    if (dir1[_c] == current) { _m = dir2[_c]; } else if (dir2[_c] == current) { _m = dir1[_c]; } else { continue; }

                    if (distance[_m - 1] == -1) {
                        distance[_m - 1] = distance[current - 1] + 6; dss++;
                        // parent[_m - 1] = current;
                        Q.Add(_m - 1);
                    }
                }
            }

            for (int i = 0; i < N; i++) {
                if (rt == i + 1) continue;
                Console.Write(distance[i] + " ");
            }
            Console.WriteLine();
        }
        #endregion

        #region  __DepthFirstSearch_NotTested
        private static void DFS() {
            var ____ = Console.ReadLine().Split(' ');
            var N = int.Parse(____[0]);
            var M = int.Parse(____[1]);

            var dir = new List<string>();

            for (int ps = 0; ps < M; ps++) {
                var _z = Console.ReadLine().Split(' ');
                dir.Add(_z[0].ToString() + " " + _z[1].ToString());
                dir.Add(_z[1].ToString() + " " + _z[0].ToString());

            }

            var sp = int.Parse(Console.ReadLine());

            var str = "";
            for (int i = 1; i <= N; i++) {
                if (i == sp) continue;
                var dd = -1;
                actualDFS(sp, i, 6, ref dd, dir, new List<int>() { sp });
                str += dd + " ";
            }
            Console.WriteLine(str);
        }
        private static void actualDFS(int sp, int ep, int distance, ref int minDistance, List<string> dir, List<int> visited) {
            for (int _d = 0; _d < dir.Count; _d++) {
                var start = int.Parse(dir[_d].Split(' ')[0]);
                var end = int.Parse(dir[_d].Split(' ')[1]);

                if (start != sp) continue;
                if (end == ep) {
                    // branch ends here
                    if (minDistance == -1 || distance < minDistance) { minDistance = distance; }
                } else {
                    if (visited.Contains(end)) continue;
                    if (minDistance != -1 && distance >= minDistance) continue;
                    visited.Add(end);
                    actualDFS(end, ep, distance + 6, ref minDistance, dir, visited);
                    visited.Remove(end);
                }
            }
        }
        #endregion

        #region __Maximise_Sum

        private static double Maximise_Sum(int n, double m, double[] a) {
            if (m < Math.Pow(10, 11)) { return Maximise_Sum2(n, m, a); }
            double[] sum1 = new double[n];
            List<int> breakPoints = new List<int>();

            if (n == 1) { return a[0] % m; }
            if (n == 2) { return Math.Max(a[0] % m, Math.Max((a[0] + a[1]) % m, a[1] % m)); }

            sum1[0] = a[0];
            double curr = a[0];
            breakPoints.Add(0);
            for (int _i = 1; _i < n; _i++) {
                curr += a[_i]; sum1[_i] = curr % m;
                if (sum1[_i] < sum1[_i - 1]) { breakPoints.Add(_i - 1); }
            }

            breakPoints.Add(n - 1);

            double _r = sum1[0];

            for (int i = 1; i < n; i++) {

                var sumi = sum1[i];
                _r = Math.Max(_r, sumi);
                if (_r == m - 1) return _r;

                for (int j = 0; j < breakPoints.Count - 1; j++) {
                    var high = breakPoints[j + 1]; var low = breakPoints[j];
                    while (high > low + 1) {
                        var mid = (high + low) / 2;
                        if (mid < i && sum1[mid] > sumi) {
                            high = mid;
                            _r = Math.Max(_r, (m + sumi - sum1[mid]) % m);
                        } else {
                            low = mid;
                        }
                    }
                }

            }

            return _r;
        }

        private static double Maximise_Sum2(int n, double m, double[] a) {
            double[] sum1 = new double[n];
            var dic = new Dictionary<int, double>();
            var dic_half = new Dictionary<int, double>();
            var dic_quarter = new Dictionary<int, double>();
            List<int> keys, keys_half, keys_quarter;

            sum1[0] = a[0];
            double curr = a[0];
            dic.Add(0, curr);
            dic_half.Add(0, curr);
            dic_quarter.Add(0, curr);
            for (int _i = 1; _i < n / 4; _i++) { curr += a[_i]; sum1[_i] = curr % m; dic.Add(_i, sum1[_i]); dic_half.Add(_i, sum1[_i]); dic_quarter.Add(_i, sum1[_i]); }
            for (int _i = n / 4; _i < n / 2; _i++) { curr += a[_i]; sum1[_i] = curr % m; dic.Add(_i, sum1[_i]); dic_half.Add(_i, sum1[_i]); }
            for (int _i = n / 2; _i < n; _i++) { curr += a[_i]; sum1[_i] = curr % m; dic.Add(_i, sum1[_i]); }

            dic = dic.OrderBy(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
            dic_half = dic_half.OrderBy(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
            dic_quarter = dic_quarter.OrderBy(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
            keys = dic.Keys.ToList();
            keys_half = dic_half.Keys.ToList();
            keys_quarter = dic_quarter.Keys.ToList();
            var nh = dic_half.Keys.Count;
            var nq = dic_quarter.Keys.Count;

            double _r = sum1[0];
            int high, low; bool cond;
            for (int i = 1; i < n; i++) {

                var sumi = sum1[i];
                _r = Math.Max(_r, sumi);

                high = nq; low = 0; cond = true; int p = 0;
                while (cond && high > low + 1) {
                    var mid = (high + low) / 2;
                    var dV = dic_quarter[keys_quarter[mid]];
                    if (dV == sumi) {
                        high = mid; cond = false; p = 0;
                    } else if (dV > sumi) {
                        high = mid;
                    } else if (dV < sumi) {
                        low = mid;
                    }
                }
                if (cond) { high = nh; low = 0; }
                while (cond && high > low + 1) {
                    var mid = (high + low) / 2;
                    var dV = dic_half[keys_half[mid]];
                    if (dV == sumi) {
                        high = mid; cond = false; p = 1;
                    } else if (dV > sumi) {
                        high = mid;
                    } else if (dV < sumi) {
                        low = mid;
                    }
                }
                if (cond) { high = n; low = 0; }
                while (cond && high > low) {
                    var mid = (high + low) / 2;
                    var dV = dic[keys[mid]];
                    if (dV == sumi) {
                        high = mid; cond = false; p = 2;
                    } else if (dV > sumi) {
                        high = mid;
                    } else if (dV < sumi) {
                        low = mid;
                    }
                }
                List<int>[] f = { keys_quarter, keys_half, keys };
                // find the first bigger number than sumi, but with a lower key than 
                // sumi's key (comes before it in the main array before sorting
                var hk = f[p][high];
                switch (p) {
                    case 2:
                    for (int _k = high + 1; _k < n; _k++) {
                        if (keys[_k] < hk) {
                            _r = Math.Max(_r, m + sumi - dic[keys[_k]]);
                            break;
                        }
                    }
                    break;
                    case 1:
                    for (int _k = high + 1; _k < nh; _k++) {
                        if (keys_half[_k] < hk) {
                            _r = Math.Max(_r, m + sumi - dic_half[keys_half[_k]]);
                            break;
                        }
                    }
                    break;
                    case 0:
                    for (int _k = high + 1; _k < nq; _k++) {
                        if (keys_quarter[_k] < hk) {
                            _r = Math.Max(_r, m + sumi - dic_quarter[keys_quarter[_k]]);
                            break;
                        }
                    }
                    break;
                    default:
                    break;
                }
            }

            return _r;
        }

        #endregion

        #region __Connected_Cell_in_a_Grid_DFS

        private static void Connected_Cell_in_a_Grid() {
            var n = int.Parse(Console.ReadLine());
            var m = int.Parse(Console.ReadLine());
            bool[][] grid = new bool[n][];
            for (int i_n = 0; i_n < n; i_n++) {
                grid[i_n] = new bool[m];
                var temp = Console.ReadLine().Split(' ');
                for (int i_m = 0; i_m < m; i_m++) {
                    grid[i_n][i_m] = temp[i_m] == "1";
                }
            }

            var ret = 0;
            var prim = new List<int>();
            for (int i_n = 0; i_n < n; i_n++) {
                for (int i_m = 0; i_m < m; i_m++) {
                    var k = i_n * 10 + i_m;
                    if (grid[i_n][i_m] && !prim.Contains(k)) {
                        prim.Add(k);
                        ret = Math.Max(ret, Connected_Cell_in_a_Grid_DFS(i_n, i_m, n, m, grid, 0, new List<int>() { k }, prim));
                    }
                }
            }

            Console.WriteLine(ret);
        }
        private static int Connected_Cell_in_a_Grid_DFS(int px, int py, int n, int m, bool[][] grid, int max, List<int> lst, List<int> prim) {
            if (!grid[px][py]) return max;

            int _r = 0;
            for (int i1 = -1; i1 <= 1; i1++) {
                for (int i2 = -1; i2 <= 1; i2++) {
                    if (px + i1 > -1 && py + i2 > -1 && px + i1 < n && py + i2 < m) {
                        var key = (px + i1) * 10 + (py + i2);
                        if (!lst.Contains(key)) {
                            lst.Add(key);
                            prim.Add(key);
                            _r = Math.Max(_r, Connected_Cell_in_a_Grid_DFS(px + i1, py + i2, n, m, grid, max + 1, lst, prim));
                            lst.Remove(key);
                        }
                    }
                }
            }

            return _r;
        }

        #endregion

        static List<string> DecimalToBinary(decimal x) {
            var bitConversion = new List<string>();
            while (x >= 0) {
                if (x == 0) {
                    bitConversion.Add("0");
                    break;
                }
                bitConversion.Add((x % 2).ToString(CultureInfo.InvariantCulture));
                x = Math.Floor(x / 2);
            }
            bitConversion.Reverse();
            return bitConversion;
        }
        static BigInteger BinaryToDecimal(string s) {
            BigInteger dec = 0;
            for (int i = 0; i < s.Length; i++) {
                // we start with the least significant digit, and work our way to the left
                if (s[s.Length - i - 1] == '0') continue;
                dec += BigInteger.Pow(2, i);
            }

            return dec;
        }

        static void Kaprekar() {
            decimal p = decimal.Parse(Console.ReadLine());
            decimal q = decimal.Parse(Console.ReadLine());

            var nums = "";
            for (decimal i = p; i <= q; i++) {
                var len = i.ToString().Length;
                decimal si = i * i;
                var slen = si.ToString().Length;

                var nsi = si.ToString();
                nsi = nsi.PadLeft(len * 2, '0');

                if (decimal.Parse(nsi.Substring(0, len)) + decimal.Parse(nsi.Substring(len)) == i) nums += i + " ";

            }
            Console.WriteLine(nums.Length > 0 ? nums : "INVALID RANGE");
        }

        static bool AnyValueIsOne(Dictionary<string, int> dic) {
            foreach (var item in dic.Values) {
                if (item == 1) return true;
            }
            return false;
        }

        static BigInteger numberOfNodes(int n) {
            if (n == 0) return 1;
            return 4 * numberOfNodes(n - 1) + 2;
        }

        static void insertionSort(int[] ar) {
            if (ar.Length == 1) { Console.WriteLine(string.Join(" ", ar)); return; }


            //for (int j = ar.Length - 1; j >= 1; j--) {
            for (int j = 1; j < ar.Length; j++) {
                if (ar[j - 1] <= ar[j]) { Console.WriteLine(string.Join(" ", ar)); continue; }

                var i = j;
                var tmp = ar[i];
                while (i >= 0) {
                    if (i == 0) {
                        ar[0] = tmp;
                        i = -1;
                    } else if (ar[i - 1] > tmp) {
                        ar[i] = ar[i - 1];
                        i--;
                    } else {
                        ar[i] = tmp;
                        i = -1;
                    }
                }
                Console.WriteLine(string.Join(" ", ar));

            }

        }

        static void The_Maximum_Subarray() {
            var T = int.Parse(Console.ReadLine());
            for (int i = 0; i < T; i++) {
                con_The_Maximum_Subarray = 0;
                var n = int.Parse(Console.ReadLine()); ;
                string[] sarr = Console.ReadLine().Split(' ');
                int[] arr = Array.ConvertAll(sarr, x => Convert.ToInt32(x));
                var maxarrval = arr.Max();
                if (maxarrval <= 0) { Console.WriteLine(maxarrval + " " + maxarrval); continue; }
                var lst = new List<int>();
                int t = 0; bool up = true, first = true; ;
                for (int k = 0; k < arr.Length; k++) {
                    if (arr[k] == 0) { continue; } else if (first) {
                        t += arr[k]; first = false; up = t > 0;
                    } else if ((arr[k] > 0 && up) || (arr[k] < 0 && !up)) {
                        t += arr[k];
                    } else {
                        lst.Add(t);
                        t = arr[k];
                        up = t > 0;
                    }
                }

                lst.Add(t);
                if (lst[lst.Count - 1] < 0) lst.RemoveAt(lst.Count - 1);
                if (lst[0] < 0) lst.RemoveAt(0);

                var u = 0;
                while (u < lst.Count - 2) {
                    if (Math.Abs(lst[u + 1]) < lst[u] && Math.Abs(lst[u + 1]) < lst[u + 2]) {
                        lst[u] = lst[u] + lst[u + 1] + lst[u + 2];
                        lst.RemoveAt(u + 2);
                        lst.RemoveAt(u + 1);
                        u = 0;
                    } else {
                        u += 2;
                    }
                }

                var newArr = lst.ToArray();

                int nocon = 0;
                for (int _ = 0; _ < n; _++) {
                    var r = arr[_];
                    if (r > 0) {
                        nocon += r;
                    }
                }
                for (int y = 0; y < newArr.Length; y += 2) {
                    if (y + 1 < newArr.Length && Math.Abs(newArr[y + 1]) >= newArr[y]) {
                        if (newArr[y] > con_The_Maximum_Subarray) con_The_Maximum_Subarray = newArr[y];
                    } else {
                        doCon_The_Maximum_Subarray(newArr, y);
                    }
                }

                Console.WriteLine(con_The_Maximum_Subarray + " " + nocon);
            }
        }
        static decimal con_The_Maximum_Subarray = decimal.MinValue;
        static void doCon_The_Maximum_Subarray(int[] arr, int r) {
            decimal tmp = 0;
            for (int i = r; i < arr.Length; i++) {
                tmp += arr[i];
                if (tmp > con_The_Maximum_Subarray) con_The_Maximum_Subarray = tmp;
            }

        }

        static void Print_Time_In_Words() {
            int h = Convert.ToInt32(Console.ReadLine());
            int m = Convert.ToInt32(Console.ReadLine());
            string[] hours = { "", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve" };
            string[] minutes = {"", "one minute", "two minutes", "three minutes", "four minutes", "five minutes", "six minutes", "seven minutes", "eight minutes", "nine minutes", "ten minutes", "eleven minutes", "twelve minutes", "thirteen minutes",
                           "fourteen minutes", "quarter", "sixteen minutes", "seventeen minutes", "eighteen minutes", "nineteen minutes", "twenty minutes", "twenty one minutes", "twenty two minutes",
                           "twenty three minutes", "twenty four minutes", "twenty five minutes", "twenty six minutes", "twenty seven minutes", "twenty eight minutes", "twenty nine minutes", "half"};

            if (m == 0) {
                Console.WriteLine(hours[h] + " o' clock");
            } else if (m > 30) {
                Console.WriteLine(minutes[60 - m] + " to " + hours[h + 1]);
            } else {
                Console.WriteLine(minutes[m] + " past " + hours[h]);
            }

        }

        static void Taum_And_Bday() {
            int t = Convert.ToInt32(Console.ReadLine());
            for (int a0 = 0; a0 < t; a0++) {
                string[] tokens_b = Console.ReadLine().Split(' ');
                decimal b = Convert.ToInt32(tokens_b[0]);
                decimal w = Convert.ToInt32(tokens_b[1]);
                string[] tokens_x = Console.ReadLine().Split(' ');
                decimal x = Convert.ToInt32(tokens_x[0]);
                decimal y = Convert.ToInt32(tokens_x[1]);
                decimal z = Convert.ToInt32(tokens_x[2]);

                decimal c1 = x * b + y * w;
                decimal c2 = b * x + w * (z + x);
                decimal c3 = w * y + b * (z + y);
                Console.WriteLine(Math.Min(Math.Min(c1, c2), c3).ToString());

            }
        }

        static void BigFactorials() {
            int n = Convert.ToInt32(Console.ReadLine());
            BigInteger b = 1;
            for (int i = 1; i <= n; i++) {
                b = b * i;
            }
            Console.WriteLine(b.ToString());
        }

        static void ConvertAMPMToMilitaryTime() {
            string time = Console.ReadLine();
            var add12 = time.Substring(time.Length - 2) == "PM";
            time = time.Substring(0, time.Length - 2);
            if (add12) {
                var t = int.Parse(time.Substring(0, 2)) + 12;
                if (time.Substring(0, 2) == "12") t = 12;
                time = t.ToString() + time.Substring(2);
            } else {
                if (time.Substring(0, 2) == "12") time = "00" + time.Substring(2);
            }
            Console.WriteLine(time);

        }

        static void GameOfThrones() {
            var T = int.Parse(Console.ReadLine());
            for (int i = 0; i < T; i++) {
                var word = Console.ReadLine();
                var dic = new Dictionary<string, int>();
                foreach (var ch in word) {
                    if (!dic.ContainsKey(ch.ToString())) { dic.Add(ch.ToString(), 1); } else { dic[ch.ToString()]++; }
                }
                var _ = 2;
                foreach (var v in dic.Values) {
                    _ -= (v % 2);
                }

                Console.WriteLine(_ > 0 ? "YES" : "NO");

            }
        }

        static void Two_String() {
            var s1 = Console.ReadLine();
            var s2 = Console.ReadLine();

            if (s2.Length < s1.Length) {
                var tmp = s2;
                s2 = s1;
                s2 = tmp;
            }

            var hash = new HashSet<string>();
            for (int stPos = 0; stPos < s1.Length; stPos++) {
                var sub = s1.Substring(stPos, 1);
                if (hash.Contains(sub)) continue; else hash.Add(sub);
                if (s2.IndexOf(sub) > -1) {
                    Console.WriteLine("YES");
                    return;
                }
            }
            Console.WriteLine("NO");
        }

        static int maxXor(int _l, int _r) {
            var fnl = 0;
            for (int i = _l; i <= _r; i++) {
                for (int j = i; j <= _r; j++) {
                    var tmp = i ^ j;
                    if (tmp > fnl) fnl = tmp;
                }
            }

            return fnl;
        }

        static void displayPathtoPrincess(int n, String[] grid) {
            int princessX = -1, princessY = -1, meX = -1, meY = -1;
            for (int i_ = 0; i_ < n; i_++) {
                for (int j_ = 0; j_ < n; j_++) {
                    if (grid[i_][j_].ToString() == "m") { meX = i_; meY = j_; } else if (grid[i_][j_].ToString() == "p") { princessX = i_; princessY = j_; }
                }
            }

            if (princessX - meX > 0) {
                for (var i = 0; i < princessX - meX; i++) { Console.WriteLine("DOWN"); }
            } else if (meX - princessX > 0) {
                for (var i = 0; i < meX - princessX; i++) { Console.WriteLine("UP"); }
            }

            if (princessY - meY > 0) {
                for (var i = 0; i < princessY - meY; i++) { Console.WriteLine("RIGHT"); }
            } else if (meY - princessY > 0) {
                for (var i = 0; i < meY - princessY; i++) { Console.WriteLine("LEFT"); }
            }
        }

        static int Pairs(int[] a, int k) {
            a = (from x in a orderby x ascending select x).ToArray();
            var n = 0;
            var list = new List<int>();
            var dic = new Dictionary<int, int>();

            for (int i = 0; i < a.Length; i++) {
                if (dic.ContainsKey(a[i])) { dic[a[i]]++; } else { dic.Add(a[i], 1); }

                //var big = k - a[i];
                var small = a[i] - k;
                list.Add(small); //if (big != small) { list.Add(small); }
            }

            foreach (var item in list) {
                if (dic.ContainsKey(item)) n += dic[item];
            }

            return n;
        }

        static void Encryption() {
            string s = Console.ReadLine();
            var ln = s.Length;
            var btm = (int)Math.Floor(Math.Sqrt(ln));
            var top = (int)Math.Ceiling(Math.Sqrt(ln));

            var row = btm; var col = btm;
            while (row * col < ln) {
                if (col < top) col++; else row++;
            }

            var _s = 0;
            String[] board = new String[row];
            for (int i = 0; i < row; i++) {
                board[i] = "";
                for (int j = 0; j < col; j++) {
                    if (_s >= ln) break;
                    board[i] += s.Substring(_s, 1);
                    _s++;
                }
            }

            var st = "";
            for (int j = 0; j < col; j++) {
                for (int i = 0; i < row; i++) {
                    if (board[i].Length <= j) continue;
                    st += board[i][j].ToString();
                }
                st += " ";
            }

            Console.WriteLine(st);
        }

        static void What_is_Next() {
            var t_c = int.Parse(Console.ReadLine());
            for (int _i_ = 0; _i_ < t_c; _i_++) {
                var n = int.Parse(Console.ReadLine());
                if (t_c == 26) {
                    var sfawefawf = n;
                }
                decimal[] a0 = Array.ConvertAll(Console.ReadLine().Split(' '), x => Convert.ToDecimal(x));

                var fnl2 = new List<decimal>();
                if (n == 1) {
                    if (a0[0] == 1) { fnl2.Add(1); fnl2.Add(1); } else {
                        fnl2.Add(1); fnl2.Add(1); fnl2.Add(a0[0] - 1);
                    }
                } else if (n == 2) {
                    if (a0[0] == 1) { fnl2.Add(1); fnl2.Add(a0[1] + 1); } else {
                        fnl2.Add(1); fnl2.Add(1 + a0[1]); fnl2.Add(a0[0] - 1);
                    }
                } else if (n == 3) {
                    var fnl = new List<decimal>();

                    fnl.Add(a0[0]);
                    fnl.Add(a0[1] - 1);
                    fnl.Add(1); fnl.Add(1);
                    fnl.Add(a0[2] - 1);
                    for (int _l = 0; _l < fnl.Count; _l++) {
                        if (fnl[_l] == 0) {
                            if (_l == fnl.Count - 1) break;
                            fnl2[_l - 1] += fnl[_l + 1];
                            _l++;
                        } else {
                            fnl2.Add(fnl[_l]);
                        }
                    }
                } else {

                    var fnl = new List<decimal>();
                    if (n % 2 == 0) {
                        // change len-3 && len-2
                        var len3 = a0[n - 3];
                        var len2 = a0[n - 2];
                        for (int j = 0; j < n - 3; j++) {
                            fnl.Add(a0[j]);
                        }
                        fnl.Add(len3 - 1);
                        fnl.Add(1);
                        fnl.Add(1);
                        fnl.Add(len2 - 1);
                        fnl.Add(a0[n - 1]);
                        var len = fnl.Count;
                        fnl[len - 3] += fnl[len - 1];
                        fnl.RemoveAt(len - 1);
                    } else {
                        // change len-2 && len-1
                        var len3 = a0[n - 2];
                        var len2 = a0[n - 1];
                        for (int j = 0; j < n - 2; j++) {
                            fnl.Add(a0[j]);
                        }
                        fnl.Add(len3 - 1);
                        fnl.Add(1);
                        fnl.Add(1);
                        fnl.Add(len2 - 1);
                    }
                    fnl2 = new List<decimal>();
                    for (int _l = 0; _l < fnl.Count; _l++) {
                        if (fnl[_l] == 0) {
                            if (_l == fnl.Count - 1) break;
                            fnl2[fnl2.Count - 1] += fnl[_l + 1];
                            _l++;
                        } else {
                            fnl2.Add(fnl[_l]);
                        }
                    }
                }
                Console.WriteLine(fnl2.Count.ToString());
                Console.WriteLine(string.Join(" ", fnl2));
            }
        }

        static void MorganMinimalString() {
            var Alph = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            var testCases = int.Parse(Console.ReadLine());
            List<string> ret_s = new List<string>();
            for (int i = 0; i < testCases; i++) {
                string s1 = Console.ReadLine();
                string s2 = Console.ReadLine();
                int l1 = s1.Length; int l2 = s2.Length;
                int x1 = 0; int x2 = 0;
                var s = new StringBuilder();

                while (x1 < l1 && x2 < l2) {
                    int which = 0;
                    var _ = 1;
                    if (s1.Substring(x1, 1) == s2.Substring(x2, 1)) {
                        while ((_ + x1) < l1 && (_ + x2) < l2) {
                            if (Alph.IndexOf(s1.Substring(x1 + _, 1)) == Alph.IndexOf(s2.Substring(x2 + _, 1))) { _++; continue; }
                            if (Alph.IndexOf(s1.Substring(x1 + _, 1)) < Alph.IndexOf(s2.Substring(x2 + _, 1))) {
                                which = 1;
                            } else { which = 2; }
                            break;
                        }
                    }

                    if (Alph.IndexOf(s1.Substring(x1, 1)) < Alph.IndexOf(s2.Substring(x2, 1))) {
                        s.Append(s1.Substring(x1++, 1));
                    } else if (Alph.IndexOf(s1.Substring(x1, 1)) > Alph.IndexOf(s2.Substring(x2, 1))) {
                        s.Append(s2.Substring(x2++, 1));
                    } else {
                        if (_ < l1) {
                            if (which == 1 || (which == 0 && x2 >= x1)) {
                                s.Append(s1.Substring(x1++, 1));
                            } else if (which == 2 || (which == 0 && x2 < x1)) {
                                s.Append(s2.Substring(x2++, 1));
                            }
                        } else {

                            _ = _ * 2;
                            while (_ > 1 && x1 < l1 && x2 < l2) {
                                _--;
                                if (Alph.IndexOf(s1.Substring(x1, 1)) == Alph.IndexOf(s2.Substring(x2, 1))) {
                                    if (which == 1 || (which == 0 && x2 >= x1)) {
                                        s.Append(s1.Substring(x1++, 1));
                                    } else if (which == 2 || (which == 0 && x2 < x1)) {
                                        s.Append(s2.Substring(x2++, 1));
                                    }
                                } else if (Alph.IndexOf(s1.Substring(x1, 1)) < Alph.IndexOf(s2.Substring(x2, 1))) {
                                    s.Append(s1.Substring(x1++, 1));
                                } else {
                                    s.Append(s2.Substring(x2++, 1));
                                }
                            }
                        }
                    }
                }

                if (x1 < l1) s.Append(s1.Substring(x1));
                if (x2 < l2) s.Append(s2.Substring(x2));

                Console.WriteLine(s.ToString());
            }

        }

        static void Maximum_Subarray() {
            var T = int.Parse(Console.ReadLine());
            for (int i = 0; i < T; i++) {
                int con = 0;
                Console.ReadLine();
                string[] sarr = Console.ReadLine().Split(' ');
                int[] arr = Array.ConvertAll(sarr, x => Convert.ToInt32(x));
                var maxarrval = arr.Max();
                if (maxarrval <= 0) { Console.WriteLine(maxarrval + " " + maxarrval); continue; }
                var lst = new List<int>();
                int t = 0; bool up = true, first = true;
                for (int k = 0; k < arr.Length; k++) {
                    if (arr[k] == 0) { continue; } else if (first) {
                        t += arr[k]; first = false; up = t > 0;
                    } else if ((arr[k] > 0 && up) || (arr[k] < 0 && !up)) {
                        t += arr[k];
                    } else {
                        lst.Add(t);
                        t = arr[k];
                        up = t > 0;
                    }
                }

                lst.Add(t);
                if (lst[lst.Count - 1] < 0) lst.RemoveAt(lst.Count - 1);
                if (lst[0] < 0) lst.RemoveAt(0);

                lst.Add(0);
                var newArr = lst.ToArray();
                int[] newArrSum = new int[newArr.Length]; newArrSum[0] = newArr[0];
                for (int _i_ = 1; _i_ < newArr.Length; _i_++) { newArrSum[_i_] = newArrSum[_i_ - 1] + newArr[_i_]; }

                int nocon = 0;

                for (int y = 0; y < newArr.Length; y += 2) {
                    nocon += newArr[y];
                    var cur = newArrSum[y];
                    con = Math.Max(con, cur);
                    for (int j = 1; j < y; j += 2) {
                        con = Math.Max(con, cur - newArrSum[j]);
                    }
                }

                Console.WriteLine(con + " " + nocon);
            }
        }

        static void Stock_Maximize() {
            int t_c = int.Parse(Console.ReadLine());
            for (int i_t = 0; i_t < t_c; i_t++) {
                int nt = int.Parse(Console.ReadLine());
                double[] stock = Array.ConvertAll(Console.ReadLine().Split(' '), x => Convert.ToDouble(x));

                double profit = 0, max = stock.Max(); int maxi = Array.IndexOf(stock, max);
                while (max > 0) {
                    for (int i = maxi - 1; i >= 0; i--) {
                        if (stock[i] < 1) break;
                        profit += max - stock[i];
                        stock[i] = 0;
                    }
                    stock[maxi] = 0;
                    max = stock.Max();
                    maxi = Array.IndexOf(stock, max);
                }
                Console.WriteLine(profit);
            }
        }

        static void Candies() {
            int n = int.Parse(Console.ReadLine());
            int candyBefore = 0;
            int before = -1;
            int[] students = new int[n];
            int[] candies = new int[n];


            for (int _i = 0; _i < n; _i++) {
                int cur = int.Parse(Console.ReadLine()); ;
                students[_i] = cur;
            }
            for (int _i = 0; _i < n; _i++) {
                int cur = students[_i];
                if (cur > before) {
                    if (_i > 0 && candies[_i - 1] < 2) candyBefore = 2; else candyBefore++;
                    candies[_i] = candyBefore;
                    before = cur;
                } else if (cur < before) {
                    if (candyBefore < 2) candyBefore--; else candyBefore = 1;
                    candies[_i] = candyBefore;
                    before = cur;
                } else {
                    candyBefore = 1;
                    candies[_i] = candyBefore;
                }
            }

            for (int i = n - 1; i >= 0; i--) {

                if (candies[i] < 2) {
                    int j = i - 1;
                    int diff = 1 - candies[i];
                    while (j >= 0 && candies[j] - candies[j + 1] == 1) {
                        j--;
                    }
                    for (int _i = j + 1; _i <= i; _i++) {
                        candies[_i] += diff;
                    }
                    i = j;
                    if (i + 2 < n && students[i + 2] == students[i + 1]) {
                        if (i >= 0 && students[i + 1] > students[i]) candies[i + 1] = candies[i] + 1;
                        else {
                            candies[i + 1] = 1;
                        }
                    }
                    i++;
                }
            }
            for (int i = 0; i < n; i++) {
                if (i + 1 < n && students[i] > students[i + 1]) candies[i] = Math.Max(candies[i], candies[i + 1] + 1);
                if (i - 1 >= 0 && students[i] > students[i - 1]) candies[i] = Math.Max(candies[i], candies[i - 1] + 1);
            }

            Console.WriteLine(candies.Sum());
        }

        static void Red_John_is_back() {
            List<int> prime = new List<int> { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309 };
            var dic = new Dictionary<int, int> { { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 1 }, { 4, 2 }, { 5, 3 }, { 6, 4 }, { 7, 5 } };
            for (int i = 8; i < 41; i++) {
                dic.Add(i, dic[i - 1] + dic[i - 4]);
            }
            int final = dic[40];
            int u = 13311;
            while (u <= final) {
                if (isPrime(u)) prime.Add(u);
                u += 2;
            }
            int tc = int.Parse(Console.ReadLine());
            for (int ___ = 0; ___ < tc; ___++) {
                int n = int.Parse(Console.ReadLine());

                int p = 0;
                for (int i = 0; i < prime.Count; i++) {
                    if (prime[i] <= dic[n]) p++; else break;
                }

                Console.WriteLine(p);
            }
        }


        #region ___HELPERS
        public static bool isPrime(int n) {
            if (n == 2 || n == 3) return true;
            else if (n % 2 == 0) return false;
            else {
                for (int j = 3; j <= (n + 1) / 2; j += 2) {
                    if (n % j == 0) return false;
                }
                return true;
            }
        }

        public static void DisplayList(List<int> lst, string p = " ") {
            Console.WriteLine(string.Join(p, lst));
        }

        public static void DisplayList(int[] lst, string p = " ") {
            Console.WriteLine(string.Join(p, lst));
        }

        public static void DisplayList(List<decimal> lst, string p = " ") {
            Console.WriteLine(string.Join(p, lst));
        }

        public static void DisplayList(List<double> lst, string p = " ") {
            Console.WriteLine(string.Join(p, lst));
        }

        public static void swap(int[] ar, int i, int j) {
            ar[j] = ar[i] + ar[j];
            ar[i] = ar[j] - ar[i];
            ar[j] = ar[j] - ar[i];
        }
        static int gcd(int a, int b){
			if ( a==0 ) return b;
			return gcd ( b%a, a );
		}
        #endregion
    }
}
